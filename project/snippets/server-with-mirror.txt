#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

void handle_client(int client_socket)
{
    char buffer[1024];
    ssize_t bytes_received;

    // Receive data from the client
    bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);
    if (bytes_received == -1)
    {
        perror("recv");
        close(client_socket);
        return;
    }

    // Process the data
    printf("Received %ld bytes: %.*s\n", bytes_received, (int)bytes_received, buffer);

    // Send a message back to the client
    const char *message = "Hello, client!";
    ssize_t bytes_sent = send(client_socket, message, strlen(message), 0);
    if (bytes_sent == -1)
    {
        perror("send");
    }

    // Close the client socket
    close(client_socket);
}

int main(int argc, char *argv[])
{
    int server_socket, client_socket;
    struct sockaddr_in server_address, client_address;
    socklen_t client_address_len = sizeof(client_address);
    int client_count = 0;

    // Create a TCP socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1)
    {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Bind the socket to a port
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(12345);
    if (bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1)
    {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, 5) == -1)
    {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    printf("Listening for clients\n");

    while (1)
    {
        if (++client_count <= 4 || (client_count % 2 == 1 && client_count <= 8))
        {
            // Server process handles the next 4 client connections, and odd-numbered connections after that
            client_socket = accept(server_socket, (struct sockaddr *)&client_address, &client_address_len);
            if (client_socket == -1)
            {
                perror("accept");
                continue;
            }
            handle_client(client_socket);
        }
        else
        {
            // Mirror process handles even-numbered connections after the first 8 connections
            pid_t mirror_pid = fork();
            if (mirror_pid == -1)
            {
                perror("fork");
                exit(EXIT_FAILURE);
            }
            else if (mirror_pid == 0)
            {
                if (access("./mirror", F_OK) == -1)
                {
                    perror("access");
                    exit(EXIT_FAILURE);
                }
                execlp("./mirror", "./mirror", NULL); // Start the mirror process
                perror("execlp");
                exit(EXIT_FAILURE);
            }
            client_count = 0; // Reset the client count after starting the mirror process
            wait(NULL);       // Wait for the mirror process to exit before continuing
            continue;
        }
    }

    close(server_socket); // Close the server socket when done
    return 0;
}